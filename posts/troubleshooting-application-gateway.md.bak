---
title: "Troubleshooting Application Gateway (Internal)"
date: 2022-12-16T11:01:37+01:00
draft: false	
tags: ['Application Gateway']
---

## Troubleshooting de Application Gateway

1) Comprobar NSG en la subred del Application Gateway

1.1)  En ASC en el "blade" de properties, identificar el SKU y la VNET

SKU Name	Standard_v2
Virtual Network Id	baa405b9-6060-4c17-9dcd-c93b93706666
Virtual Network Name	MR-LI-Net-02-WE-S-BDAP	

Habrá que identificar la VNET del Application Gateway.
Recordemos que la subnet del Application Gateway no tiene por qué tener un nombre específico
así que la mejor forma es desde la pestaña de propiedades, irse a la sección Instances,
y ver las IPs que están cogiendo:

appgw_0	10.247.11.132	65200	65350	7b14d32e-9b1b-4025-b3f6-c7acfe5e1598	
appgw_1	10.247.11.133	65201	65351	3ec00ac0-6df4-4bcd-9b9e-c0973f104742
 
En este caso sabemos que tienen un rango 10.247.11.

Nos vamos a las subredes de la VNET MR-LI-Net-02-WE-S-BDAP, y vemos que la que encaja es

MR-LI-Net-02-Sub-12-WE-S-BDAP	10.247.11.128/29

Que tiene un NSG

MR-LI-Net-02-WE-S-BDAP-GEO-NSG

Abrimos el recurso de NSG desde ASC , y puesto que es V2, tiene que permitir incoming traffic en los puertos 65200-65535
destination subnet ANY and source GatewayManager service tag

https://learn.microsoft.com/en-us/azure/application-gateway/configuration-infrastructure

Se puede hacer automáticamente con un Jarvis Action

Regional Network Manager > Network Security Group > Get Access Control Group for a given vnet and subnet

https://portal.microsoftgeneva.com/?page=actions&acisEndpoint=Public&managementOpen=false&selectedNodeType=3&extension=Regional%20Network%20Manager&group=Network%20Security%20Group&operationId=GetAclGroupForAssociatedObject&operationName=Get%20Access%20Control%20Group%20for%20a%20given%20vnet%20and%20subnet&inputMode=single&params={"smeregionparameter":"europewest","smevnetparameter":"baa405b9-6060-4c17-9dcd-c93b93706666","smesubnetparameter":"MR-LI-Net-02-Sub-12-WE-S-BDAP"}&actionEndpoint=Regional%20Network%20Manager%20Endpoint&genevatraceguid=7ac5f91d-258f-4aec-9686-898fa5491771

2) Comprobar si la VNET donde está el APPLICATION GATEWAY tiene CUSTOM DNS

DNS Servers	10.28.110.4, 10.28.110.5

	
Si el backend es un FQDN, hay que asegurarse de que la resolución DNS desde la instancia del APP GW es correcta

SAW --
Brooklyn > Application Gateways > Get List of NonResolvable Domains

https://portal.microsoftgeneva.com/?page=actions&acisEndpoint=Public&managementOpen=false&selectedNodeType=3&extension=Brooklyn&group=Application%20Gateways&operationId=getlistofnonresolvabledomains&operationName=Get%20List%20of%20NonResolvable%20Domains&inputMode=single&params={"subscriptionid":"c64d0b19-4679-45f5-b17a-e27b02146589","resourcegroupname":"MR-BDAP-SBX-WE-APPGWGEOPOC","applicationgatewayname":"mrbdapsbxweappgwgeopoc01","domainnametocheck":"mrbdapgeoservicewe-sbx.munichre.com","includedefaultcontrolpathendpoints":false,"includedefaultdatapathendpoints":false,"smegatewaymanagerregion":"West%20Europe"}&actionEndpoint=Brooklyn%20-%20Prod&genevatraceguid=b9c097da-66da-4de4-bda7-4628d9b0a1b7

Está resolviendo a : 20.50.10.108

{
    "ID": "18e91fa8-0b58-4b2f-b2f1-65b4a5a76cfe",
    "OperationName": null,
    "OperationStartedTime": "2023-04-18T08:58:31.3602977",
    "OperationCompletedTime": "2023-04-18T08:58:32.6311249",
    "Status": "Successful",
    "HttpStatusCode": "OK",
    "Error": "",
    "Data": {
        "allResults": [
            {
                "instanceNumber": 0,
                "instanceDetails": "https://20.50.234.217:65200",
                "segmentedOutputPerInstance": {
                    "datapathEndpointsResults": [],
                    "controlpathEndpointsResults": [],
                    "extraEndpointResults": [
                        {
                            "domainName": "mrbdapgeoservicewe-sbx.munichre.com",
                            "listDomainResolutionResult": [
                                {
                                    "dnsServer": "10.28.110.4",
                                    "ipList": [
                                        "20.50.10.108"
                                    ],
                                    "status": "Succeeded",
                                    "resolutionError": null
                                },
                                {
                                    "dnsServer": "10.28.110.5",
                                    "ipList": [
                                        "20.50.10.108"
                                    ],
                                    "status": "Succeeded",
                                    "resolutionError": null
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "instanceNumber": 1,
                "instanceDetails": "https://20.50.234.217:65201",
                "segmentedOutputPerInstance": {
                    "datapathEndpointsResults": [],
                    "controlpathEndpointsResults": [],
                    "extraEndpointResults": [
                        {
                            "domainName": "mrbdapgeoservicewe-sbx.munichre.com",
                            "listDomainResolutionResult": [
                                {
                                    "dnsServer": "10.28.110.4",
                                    "ipList": [
                                        "20.50.10.108"
                                    ],
                                    "status": "Succeeded",
                                    "resolutionError": null
                                },
                                {
                                    "dnsServer": "10.28.110.5",
                                    "ipList": [
                                        "20.50.10.108"
                                    ],
                                    "status": "Succeeded",
                                    "resolutionError": null
                                }
                            ]
                        }
                    ]
                }
            }
        ],
        "failedResults": [
            {
                "instanceNumber": 0,
                "instanceDetails": "https://20.50.234.217:65200",
                "segmentedOutputPerInstance": {
                    "datapathEndpointsResults": [],
                    "controlpathEndpointsResults": [],
                    "extraEndpointResults": []
                }
            },
            {
                "instanceNumber": 1,
                "instanceDetails": "https://20.50.234.217:65201",
                "segmentedOutputPerInstance": {
                    "datapathEndpointsResults": [],
                    "controlpathEndpointsResults": [],
                    "extraEndpointResults": []
                }
            }
        ]
    },
    "InternalStatus": "Succeeded@,Succeeded@ApplicationGatewayReentrantWorkItem,4/18/2023 8:58:32 AM;",
    "HealthStatus": ""
}



3) Obtener la configuración RAW del Application Gateway

Desde ASC --> Diagnostics --> Raw Brooklyn Config	SAS URL

Ó desde Jarvis:
Brooklyn > Application Gateways > Get Application Gateway

https://portal.microsoftgeneva.com/?page=actions&acisEndpoint=Public&managementOpen=false&selectedNodeType=3&extension=Brooklyn&group=Application%20Gateways&operationId=getapplicationgateway&operationName=Get%20Application%20Gateway&inputMode=single&params={"subscriptionid":"c64d0b19-4679-45f5-b17a-e27b02146589","resourcegroupname":"MR-BDAP-SBX-WE-APPGWGEOPOC","applicationgatewayname":"mrbdapsbxweappgwgeopoc01","smegatewaymanagerregion":"West%20Europe"}&actionEndpoint=Brooklyn%20-%20Prod&genevatraceguid=7ac5f91d-258f-4aec-9686-898fa5491771


Rellenaremos la siguiente plantilla:

URL / HOST / PROTOCOL

LISTENER

RULE

BACKEND POOL

BACKEND SETTINGS

PROBE / CUSTOM PROBE



-------
URL / HOST / PROTOCOL

https://mrbdapgeoservicewe-sbx.munichre.com/geoserver/web 

LISTENER

  {
        "FrontendIP": "appGatewayFrontendIP",
        "FrontendPort": "port_443",
        "Name": "geoHttpsListener",
        "Protocol": "Https",
        "RequireServerNameIndication": "False",
        "SslCert": "mrbdapgeoservicepocwe-sbx-chain"
      }
	  

RULE

 {
                "Listener": "geoHttpsListener",
                "Name": "rejectAdminUIHttpsRule",
                "Priority": 80,
                "Type": "PathBasedRouting",
                "UrlPathMap": "urlPathMapHttps"
            }

RULE TYPE: PATH BASED 

UrlPathMaps": [
      {
        "DefaultBackendAddressPool": "geoBackendPoolHttps",
        "DefaultBackendHttpSettings": "geoBackendHttpsSettings",
        "Name": "urlPathMapHttps",
        "PathRules": [
          {
            "BackendAddressPool": "emptyBackendPool",
            "BackendHttpSettings": "geoBackendHttpsSettings",
            "Paths": [
              "/geoserver/abc/*"
            ],
            "Priority": null,
            "WebApplicationFirewallConfig": null
          }
        ]
      }
    ]

BACKEND POOL

geoBackendPoolHttps

{
        "BackendServersInfo": {},
        "IPAddresses": [
          "mrbdaplgeopoc01.munichre.com"
        ],
        "Name": "geoBackendPoolHttps"
      }



BACKEND SETTINGS

geoBackendHttpsSettings

{
        "AffinityCookieName": "ApplicationGatewayAffinity",
        "AuthenticationCertificates": [],
        "ConnectionDraining": {
          "DrainTimeoutInSec": 1,
          "Enabled": false
        },
        "CookieBasedAffinity": "Disabled",
        "Name": "geoBackendHttpsSettings",
        "PickHostNameFromBackendAddress": true,
        "Port": 8443,
        "Probe": "geoBackendHealthHttps",
        "Protocol": "Https",
        "RequestTimeout": 30
      }
PROBE / CUSTOM PROBE

"Name": "geoBackendHealthHttps",
        "Path": "/geoserver",
        "PickHostNameFromBackendHttpSettings": true,
        "PickServerNameIndicationFromBackendSettings": false,
        "Port": null,
        "Protocol": "Https",
        "Timeout": 30,
        "UnhealthyThreshold": 3
      }


Cuando un usuario accede a 

https://mrbdapgeoservicewe-sbx.munichre.com/geoserver/web  

Llega al listener geoHttpsListener

que manda a 

geoBackendPoolHttps

{
        "BackendServersInfo": {},
        "IPAddresses": [
          "mrbdaplgeopoc01.munichre.com"
        ],
        "Name": "geoBackendPoolHttps"
  }


https://mrbdapgeoservicewe-sbx.munichre.com/geoserver/web  -->  mrbdaplgeopoc01.munichre.com

4) Comprobar que el dominio al que quieren acceder, resuelve a la IP del APP GW

 dig mrbdapgeoservicewe-sbx.munichre.com

; <<>> DiG 9.16.1-Ubuntu <<>> mrbdapgeoservicewe-sbx.munichre.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 12451
;; flags: qr rd ad; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;mrbdapgeoservicewe-sbx.munichre.com. IN        A

;; ANSWER SECTION:
mrbdapgeoservicewe-sbx.munichre.com. 0 IN CNAME 582259a1-dcaa-4cca-b1cf-e60d3f045ecd.tenant.runtime.msappproxy.net.
582259a1-dcaa-4cca-b1cf-e60d3f045ecd.tenant.runtime.msappproxy.net. 0 IN CNAME cwap-eur2-runtime.routing.msappproxy.net.
cwap-eur2-runtime.routing.msappproxy.net. 0 IN CNAME eur.proxy-2.appproxy.msidentity.com.
eur.proxy-2.appproxy.msidentity.com. 0 IN CNAME www.tm.eur.proxy-2.appproxy.trafficmanager.net.
www.tm.eur.proxy-2.appproxy.trafficmanager.net. 0 IN A 20.199.104.59

;; Query time: 0 msec
;; SERVER: 172.25.240.1#53(172.25.240.1)
;; WHEN: Tue Apr 18 10:42:15 CEST 2023
;; MSG SIZE  rcvd: 534

En este caso:
20.199.104.59


## Códigos de error de Application Gateway

https://learn.microsoft.com/es-es/azure/application-gateway/http-response-codes

## HTTP STATUS CODE 404

Si nos da un 404, es porque la resolución DNS llega a la IP del Application Gateway, pero no hay nada que escuche la URL específica que 
estamos indicando.

Imaginemos que tenemos configurado un dominio ritmosereno.com, con la siguiente configuración en la zona DNS:
Es decir, si tenemos configurado una zona DNS con la siguiente información

{{< figure src="/Images/APPGWTROUBLESHOOTING/ZONADNS1.jpg" title="Configuración Zona DNS" >}}



/subscriptions/c64d0b19-4679-45f5-b17a-e27b02146589/resourceGroups/MR-BDAP-SBX-WE-APPGWGEOPOC/providers/Microsoft.Network/applicationGateways/mrbdapsbxweappgwgeopoc01

## HTTP STATUS CODE 502 ##

El error 502 es un error genérico que indica que un proxy (intermediario), recibe una respuesta 
inválida del servidor que tiene detrás (el backend)

502	The server was acting as a gateway or proxy and received an invalid response
from the upstream server.

Esta es la nota general para tratar errores 502:

https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-troubleshooting-502


En un caso particular en el que estuve trabajando, saqué los ReqRespErrorLog


https://portal.microsoftgeneva.com/s/F17C74C8

errorMessage

upstream SSL certificate does not match \"mrbdapgeoservicewe-sbx.munichre.com\"

phase:
SSL handshaking to upstream

Esto significa que en el proceso de comunicación entre las instancias del APP GW 
y el servidor en el backend, el APP GW mandó una request al backend server, con el fqdn:
mrbdapgeoservicewe-sbx.munichre.com

Pero el backend no tiene instalado ningún certificado que haga match con ese CNAME.


## Upstream SSL certificate does not match

### Cause

The TLS certificate installed in the backend server(s), does not match the hostname received in the Host request header. 

In scenarios where End-to-end TLS is enabled, a configuration that is achieved by editing the appropiate "Backend HTTP Settings", and changing there the configuration of the "Backend protocol" setting to HTTPS, it is mandatory to ensure that the CNAME of the TLS certificate installed in the backend servers matches the hostname coming to the backend in the HTTP host header request.

As a reminder, the effect of enabling on the "Backend HTTP Settings" the option of protocol HTTPS rather than HTTP, will be that the second part of the communication that happens between the instances of the Application Gateway and the backend servers will be encrypted with TLS.

Due to the fact that by default Application Gateway sends the same HTTP host header to the backend as it receives from the client, you will need to ensure that the TLS certificate installed on the backend server, is issued with a CNAME that matches the host name received by that backend server in the HTTP host header.
Remember that, unless specified otherwise, this hostname would be the same as the one received from the client.

For example:

Imagine that you have an Application Gateway to serve the https requests for domain www.contoso.com
You could have the domain contoso.com delegated to an Azure DNS Public Zone, and a A DNS record in that zone pointing www.contoso.com to the public IP of the specific Application Gateway that is going to serve the requests.

On that Application Gateway you should have a listener for the host www.contoso.com with a rule that has the "Backed HTTP Setting" forced to use protocol HTTPS (ensuring End-to-end TLS). That same rule could have configured a backend pool with two VMs running IIS as Web servers.

As we know enabling HTTPS in the "Backed HTTP Setting" of the rule will make the second part of the communication that happens between the Application Gateway instances and the servers in the backend to use TLS.

If the backend servers do not have a TLS certificate issued for the CNAME www.contoso.com or *.contoso.com, the request will fail with **Server Error: 502 - Web server received an invalid response while acting as a gateway or proxy server** because the upstream SSL certificate (the certificate installed in the backend servers) will not match the hostname in the host header, and hence the TLS negotiation will fail. 


www.contoso.com --> APP GW front end IP --> Listener with a rule that configures "Backend HTTP Settings" to use protocol HTTP  --> Backend Pool --> Web server (needs to have a TLS certificate installed for www.contoso.com) 

## Solution

it is required that the CNAME of the TLS certificate installed in the backend server, matches the host name configured in the HTTP backend settings, otherwise the second part of the End-to-end communication that happens between the instances of the Application Gateway and the backend, will fail with "Upstream SSL certificate does not match", and will throw back a **Server Error: 502 - Web server received an invalid response while acting as a gateway or proxy server**


En otro caso en el que estuve trabajando:

[HTTPS Probe Info : upstream: 'mdm_prod_backend_pool~app-gateway-https-backend-setting', server: '10.14.147.102', endpoint: '10.14.147.102:443'] : IncompleteBackendCertificateChainOnlyLeafCertificateIsPresent -> Incomplete backend server certificate chain. Backend chain consists of only leaf certificate.


{{< figure src="/Images/APPGWTROUBLESHOOTING/esquema.jpg" title="Esquema de dónde hay que instalar los certificados" >}}


ReqRespLog son logs donde puede verse el httpStatus y el ServerStatus, y de esa manera ver si el 502 viene del backend ServerStatus, o del APP GW

https://portal.microsoftgeneva.com/s/8E42A5DB

Y luego tenemos los BackendServerDiagnosticsHistory, donde podemos ver los Health Probes

https://portal.microsoftgeneva.com/s/82A255A8
 
502	The server was acting as a gateway or proxy and received an invalid response from the upstream server.


Para configurar los logs del APP GW en el lado del cliente:

https://learn.microsoft.com/en-us/azure/application-gateway/application-gateway-diagnostics

HTTP Settings de configuracion en el APP GW

https://learn.microsoft.com/en-us/azure/application-gateway/configuration-http-settings


https://learn.microsoft.com/en-us/azure/application-gateway/ssl-overview

## Recreación de certificados
Adding to my last email, if the certificate was provided by Digicert, normally they include the full chain on all the certificates but if that was not the case and if they provided you with a .pfx file you can recreate it with the following steps:

 

From the original PFX certificate export the private key with command: openssl pkcs12 -in Certificate.pfx -nocerts -out private.key
Obtain the leaf, intermediate and root certificates and save them as base-64 cer files.
Create a bundle of the entire chain (IMPORTANT, always from leaf to Root, is important to keep it in order) with the following format and save it as a .cer file:
 

-----BEGIN CERTIFICATE-----

(Your Primary SSL certificate: your_domain_name.cer)

-----END CERTIFICATE-----

 

-----BEGIN CERTIFICATE-----

(Your Intermediate certificate: intermediate.cer)

-----END CERTIFICATE-----

 

-----BEGIN CERTIFICATE-----

(Your Root certificate: TrustedRoot.cer)

-----END CERTIFICATE—

 

Recreate the pfx certificate with the command:
 

openssl pkcs12 -export -out certificate.pfx -inkey private.key -in bundled.cer

 

But if remember correctly on aks you will use all several files so you will need to use one for private key and another for the bundle, in any case the bundle can be created in the same way described on step 3.

 

Best regards,

 

